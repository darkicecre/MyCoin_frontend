{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCollector = useCollector;\n\nvar _fastDeepEqual = _interopRequireDefault(require(\"fast-deep-equal\"));\n\nvar _react = require(\"react\");\n\nvar _useIsomorphicLayoutEffectJs = require(\"./useIsomorphicLayoutEffect.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction useCollector(monitor, collect, onUpdate) {\n  const [collected, setCollected] = (0, _react).useState(() => collect(monitor));\n  const updateCollected = (0, _react).useCallback(() => {\n    const nextValue = collect(monitor); // This needs to be a deep-equality check because some monitor-collected values\n    // include XYCoord objects that may be equivalent, but do not have instance equality.\n\n    if (!(0, _fastDeepEqual).default(collected, nextValue)) {\n      setCollected(nextValue);\n\n      if (onUpdate) {\n        onUpdate();\n      }\n    }\n  }, [collected, monitor, onUpdate]); // update the collected properties after react renders.\n  // Note that the \"Dustbin Stress Test\" fails if this is not\n  // done when the component updates\n\n  (0, _useIsomorphicLayoutEffectJs).useIsomorphicLayoutEffect(updateCollected);\n  return [collected, updateCollected];\n}","map":{"version":3,"mappings":";;;;;QAUgBA;;AAVE,kBAAiB,qDAAjB;;AACoB,UAAO,mBAAP;;AACI,gCAAgC,4CAAhC;;;;;;;;SAQ1BA,aACfC,SACAC,SACAC,UACkB;EAClB,MAAK,CAAEC,SAAF,EAAaC,YAAb,IAAyB,IAAIC,MAAJ,EAAYA,QAAZ,CAAY,MAAOJ,OAAO,CAACD,OAAD,CAA1B,CAA9B;EAEA,MAAMM,eAAe,OAAGC,MAAH,EAAcA,WAAd,CAAc,MAAO;IACzC,MAAMC,SAAS,GAAGP,OAAO,CAACD,OAAD,CAAzB,CADyC,CAEzC;IACA;;IACA,IAAE,KAAGS,cAAH,EAAQC,OAAR,CAASP,SAAT,EAAoBK,SAApB,CAAF,EAAkC;MACjCJ,YAAY,CAACI,SAAD,CAAZJ;;MACA,IAAIF,QAAJ,EAAc;QACbA,QAAQ;MACR;IACD;EACD,CAVoB,EAUlB,CAACC,SAAD,EAAYH,OAAZ,EAAqBE,QAArB,CAVkB,CAArB,CAHkB,CAelB;EACA;EACA;;MACAS,8BAAyBA,0BAACL;EAE1B,OAAO,CAACH,SAAD,EAAYG,eAAZ,CAAP;AACA","names":["useCollector","monitor","collect","onUpdate","collected","setCollected","useState","updateCollected","useCallback","nextValue","equal","default","useIsomorphicLayoutEffect"],"sources":["../../../src/hooks/useCollector.ts"],"sourcesContent":["import equal from 'fast-deep-equal'\nimport { useState, useCallback } from 'react'\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js'\n\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\nexport function useCollector<T, S>(\n\tmonitor: T,\n\tcollect: (monitor: T) => S,\n\tonUpdate?: () => void,\n): [S, () => void] {\n\tconst [collected, setCollected] = useState(() => collect(monitor))\n\n\tconst updateCollected = useCallback(() => {\n\t\tconst nextValue = collect(monitor)\n\t\t// This needs to be a deep-equality check because some monitor-collected values\n\t\t// include XYCoord objects that may be equivalent, but do not have instance equality.\n\t\tif (!equal(collected, nextValue)) {\n\t\t\tsetCollected(nextValue)\n\t\t\tif (onUpdate) {\n\t\t\t\tonUpdate()\n\t\t\t}\n\t\t}\n\t}, [collected, monitor, onUpdate])\n\n\t// update the collected properties after react renders.\n\t// Note that the \"Dustbin Stress Test\" fails if this is not\n\t// done when the component updates\n\tuseIsomorphicLayoutEffect(updateCollected)\n\n\treturn [collected, updateCollected]\n}\n"]},"metadata":{},"sourceType":"script"}