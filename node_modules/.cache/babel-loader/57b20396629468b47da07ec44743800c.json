{"ast":null,"code":"var _jsxFileName = \"/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/pages/components-overview/snackbar.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux'; // material-ui\n\nimport { Button, Grid } from '@mui/material'; // project import\n\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport { openSnackbar } from 'store/reducers/snackbar'; // ==============================|| COMPONENTS - SNACKBAR ||============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ComponentSnackbar = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const basicSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        close: false\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' },\n        close: false\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n  const outlinedSnackbarCodeString = `<Button\n  variant=\"outlined\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'secondary'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'success'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'warning'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'info'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'error'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n  const closeSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert'\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' }\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        }\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        }\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        }\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        }\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n  const actionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        actionButton: true\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' },\n        actionButton: true\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n  const positionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'left' },\n        message: 'This is an top-left message!'\n      })\n    )\n  }\n>\n  Top-Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'center' },\n        message: 'This is an top-center message!'\n      })\n    )\n  }\n>\n  Top-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        message: 'This is an top-right message!'\n      })\n    )\n  }\n>\n  Top-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n        message: 'This is an bottom-right message!'\n      })\n    )\n  }\n>\n  Bottom-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n        message: 'This is an bottom-center message!'\n      })\n    )\n  }\n>\n  Bottom-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n        message: 'This is an bottom-left message!'\n      })\n    )\n  }\n>\n  Bottom-Left\n</Button>`;\n  const transitionsSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an fade message!',\n        transition: 'Fade'\n      })\n    )\n  }\n>\n  Default/Fade\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-left message!',\n        transition: 'SlideLeft'\n      })\n    )\n  }\n>\n  Slide Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-up message!',\n        transition: 'SlideUp'\n      })\n    )\n  }\n>\n  Slide Up\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-right message!',\n        transition: 'SlideRight'\n      })\n    )\n  }\n>\n  Slide Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-down message!',\n        transition: 'SlideDown'\n      })\n    )\n  }\n>\n  Slide Down\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an grow message!',\n        transition: 'Grow'\n      })\n    )\n  }\n>\n  Grow\n</Button>`;\n  return /*#__PURE__*/_jsxDEV(ComponentSkeleton, {\n    children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n      title: \"Snackbar\",\n      caption: \"Snackbars provide brief notifications. The component is also known as a toast.\",\n      directory: \"src/pages/components-overview/snackbar\",\n      link: \"https://mui.com/material-ui/react-snackbar/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComponentWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Basic\",\n            codeString: basicSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is default message',\n                    variant: 'alert',\n                    close: false\n                  })),\n                  children: \"Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 642,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is secondary message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'secondary'\n                    },\n                    close: false\n                  })),\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"success\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is success message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'success'\n                    },\n                    close: false\n                  })),\n                  children: \"Success\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 678,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 677,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"warning\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is warning message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'warning'\n                    },\n                    close: false\n                  })),\n                  children: \"Warning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 699,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"info\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is info message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'info'\n                    },\n                    close: false\n                  })),\n                  children: \"Info\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"error\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is error message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'error'\n                    },\n                    close: false\n                  })),\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 741,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Outlined\",\n            codeString: outlinedSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is default message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined'\n                    },\n                    close: false\n                  })),\n                  children: \"Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 768,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is secondary message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'secondary'\n                    },\n                    close: false\n                  })),\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"success\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is success message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'success'\n                    },\n                    close: false\n                  })),\n                  children: \"Success\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 810,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 809,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"warning\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is warning message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'warning'\n                    },\n                    close: false\n                  })),\n                  children: \"Warning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"info\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is info message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'info'\n                    },\n                    close: false\n                  })),\n                  children: \"Info\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 854,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"error\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is error message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'error'\n                    },\n                    close: false\n                  })),\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 876,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 875,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"With Close\",\n            codeString: closeSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is default message',\n                    variant: 'alert'\n                  })),\n                  children: \"Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 904,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 903,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is secondary message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'secondary'\n                    }\n                  })),\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 920,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 919,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"success\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is success message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'success'\n                    }\n                  })),\n                  children: \"Success\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 940,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"warning\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is warning message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'warning'\n                    }\n                  })),\n                  children: \"Warning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 960,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 959,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"info\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is info message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'info'\n                    }\n                  })),\n                  children: \"Info\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 980,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"error\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is error message',\n                    variant: 'alert',\n                    alert: {\n                      color: 'error'\n                    }\n                  })),\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1000,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 999,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"With Close + Action\",\n            codeString: actionSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is default message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1026,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1025,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is secondary message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'secondary'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1046,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1045,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"success\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is success message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'success'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Success\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1068,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1067,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"warning\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is warning message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'warning'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Warning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1090,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1089,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"info\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is info message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'info'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Info\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1112,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1111,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"error\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is error message',\n                    variant: 'alert',\n                    alert: {\n                      variant: 'outlined',\n                      color: 'error'\n                    },\n                    actionButton: true\n                  })),\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1134,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1024,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1023,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Position\",\n            codeString: positionSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'top',\n                      horizontal: 'left'\n                    },\n                    message: 'This is an top-left message!'\n                  })),\n                  children: \"Top-Left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1162,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'top',\n                      horizontal: 'center'\n                    },\n                    message: 'This is an top-center message!'\n                  })),\n                  children: \"Top-Center\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1178,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'top',\n                      horizontal: 'right'\n                    },\n                    message: 'This is an top-right message!'\n                  })),\n                  children: \"Top-Right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1194,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'right'\n                    },\n                    message: 'This is an bottom-right message!'\n                  })),\n                  children: \"Bottom-Right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1210,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1209,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'center'\n                    },\n                    message: 'This is an bottom-center message!'\n                  })),\n                  children: \"Bottom-Center\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1226,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    },\n                    message: 'This is an bottom-left message!'\n                  })),\n                  children: \"Bottom-Left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1242,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1241,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Transitions\",\n            codeString: transitionsSnackbarCodeString,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an fade message!',\n                    transition: 'Fade'\n                  })),\n                  children: \"Default/Fade\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1264,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an slide-left message!',\n                    transition: 'SlideLeft'\n                  })),\n                  children: \"Slide Left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1280,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1279,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an slide-up message!',\n                    transition: 'SlideUp'\n                  })),\n                  children: \"Slide Up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1296,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1295,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an slide-right message!',\n                    transition: 'SlideRight'\n                  })),\n                  children: \"Slide Right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1312,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1311,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an slide-down message!',\n                    transition: 'SlideDown'\n                  })),\n                  children: \"Slide Down\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1328,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1327,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: () => dispatch(openSnackbar({\n                    open: true,\n                    message: 'This is an grow message!',\n                    transition: 'Grow'\n                  })),\n                  children: \"Grow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1344,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1343,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1262,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 629,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ComponentSnackbar, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ComponentSnackbar;\nexport default ComponentSnackbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentSnackbar\");","map":{"version":3,"names":["useDispatch","Button","Grid","MainCard","ComponentHeader","ComponentWrapper","ComponentSkeleton","openSnackbar","ComponentSnackbar","dispatch","basicSnackbarCodeString","outlinedSnackbarCodeString","closeSnackbarCodeString","actionSnackbarCodeString","positionSnackbarCodeString","transitionsSnackbarCodeString","open","message","variant","close","alert","color","actionButton","anchorOrigin","vertical","horizontal","transition"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/pages/components-overview/snackbar.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\n\n// material-ui\nimport { Button, Grid } from '@mui/material';\n\n// project import\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport { openSnackbar } from 'store/reducers/snackbar';\n\n// ==============================|| COMPONENTS - SNACKBAR ||============================== //\n\nconst ComponentSnackbar = () => {\n  const dispatch = useDispatch();\n\n  const basicSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        close: false\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' },\n        close: false\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n\n  const outlinedSnackbarCodeString = `<Button\n  variant=\"outlined\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'secondary'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'success'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'warning'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'info'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          variant: 'outlined',\n          color: 'error'\n        },\n        close: false\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n\n  const closeSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert'\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' }\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        }\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        }\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        }\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        }\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n\n  const actionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is default message',\n        variant: 'alert',\n        actionButton: true\n      })\n    )\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is secondary message',\n        variant: 'alert',\n        alert: { color: 'secondary' },\n        actionButton: true\n      })\n    )\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is success message',\n        variant: 'alert',\n        alert: {\n          color: 'success'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is warning message',\n        variant: 'alert',\n        alert: {\n          color: 'warning'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is info message',\n        variant: 'alert',\n        alert: {\n          color: 'info'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is error message',\n        variant: 'alert',\n        alert: {\n          color: 'error'\n        },\n        actionButton: true\n      })\n    )\n  }\n>\n  Error\n</Button>`;\n\n  const positionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'left' },\n        message: 'This is an top-left message!'\n      })\n    )\n  }\n>\n  Top-Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'center' },\n        message: 'This is an top-center message!'\n      })\n    )\n  }\n>\n  Top-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        message: 'This is an top-right message!'\n      })\n    )\n  }\n>\n  Top-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n        message: 'This is an bottom-right message!'\n      })\n    )\n  }\n>\n  Bottom-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n        message: 'This is an bottom-center message!'\n      })\n    )\n  }\n>\n  Bottom-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n        message: 'This is an bottom-left message!'\n      })\n    )\n  }\n>\n  Bottom-Left\n</Button>`;\n\n  const transitionsSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an fade message!',\n        transition: 'Fade'\n      })\n    )\n  }\n>\n  Default/Fade\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-left message!',\n        transition: 'SlideLeft'\n      })\n    )\n  }\n>\n  Slide Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-up message!',\n        transition: 'SlideUp'\n      })\n    )\n  }\n>\n  Slide Up\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-right message!',\n        transition: 'SlideRight'\n      })\n    )\n  }\n>\n  Slide Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an slide-down message!',\n        transition: 'SlideDown'\n      })\n    )\n  }\n>\n  Slide Down\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    dispatch(\n      openSnackbar({\n        open: true,\n        message: 'This is an grow message!',\n        transition: 'Grow'\n      })\n    )\n  }\n>\n  Grow\n</Button>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Snackbar\"\n        caption=\"Snackbars provide brief notifications. The component is also known as a toast.\"\n        directory=\"src/pages/components-overview/snackbar\"\n        link=\"https://mui.com/material-ui/react-snackbar/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeString={basicSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is default message',\n                          variant: 'alert',\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is secondary message',\n                          variant: 'alert',\n                          alert: { color: 'secondary' },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"success\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is success message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'success'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"warning\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is warning message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'warning'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"info\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is info message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'info'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is error message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'error'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Outlined\" codeString={outlinedSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is default message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is secondary message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'secondary'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"success\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is success message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'success'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is warning message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'warning'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"info\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is info message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'info'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is error message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'error'\n                          },\n                          close: false\n                        })\n                      )\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"With Close\" codeString={closeSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is default message',\n                          variant: 'alert'\n                        })\n                      )\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is secondary message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'secondary'\n                          }\n                        })\n                      )\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"success\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is success message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'success'\n                          }\n                        })\n                      )\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"warning\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is warning message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'warning'\n                          }\n                        })\n                      )\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"info\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is info message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'info'\n                          }\n                        })\n                      )\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is error message',\n                          variant: 'alert',\n                          alert: {\n                            color: 'error'\n                          }\n                        })\n                      )\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"With Close + Action\" codeString={actionSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is default message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is secondary message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'secondary'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"success\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is success message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'success'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is warning message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'warning'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"info\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is info message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'info'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is error message',\n                          variant: 'alert',\n                          alert: {\n                            variant: 'outlined',\n                            color: 'error'\n                          },\n                          actionButton: true\n                        })\n                      )\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Position\" codeString={positionSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'top', horizontal: 'left' },\n                          message: 'This is an top-left message!'\n                        })\n                      )\n                    }\n                  >\n                    Top-Left\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'top', horizontal: 'center' },\n                          message: 'This is an top-center message!'\n                        })\n                      )\n                    }\n                  >\n                    Top-Center\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                          message: 'This is an top-right message!'\n                        })\n                      )\n                    }\n                  >\n                    Top-Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n                          message: 'This is an bottom-right message!'\n                        })\n                      )\n                    }\n                  >\n                    Bottom-Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n                          message: 'This is an bottom-center message!'\n                        })\n                      )\n                    }\n                  >\n                    Bottom-Center\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n                          message: 'This is an bottom-left message!'\n                        })\n                      )\n                    }\n                  >\n                    Bottom-Left\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Transitions\" codeString={transitionsSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an fade message!',\n                          transition: 'Fade'\n                        })\n                      )\n                    }\n                  >\n                    Default/Fade\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an slide-left message!',\n                          transition: 'SlideLeft'\n                        })\n                      )\n                    }\n                  >\n                    Slide Left\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an slide-up message!',\n                          transition: 'SlideUp'\n                        })\n                      )\n                    }\n                  >\n                    Slide Up\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an slide-right message!',\n                          transition: 'SlideRight'\n                        })\n                      )\n                    }\n                  >\n                    Slide Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an slide-down message!',\n                          transition: 'SlideDown'\n                        })\n                      )\n                    }\n                  >\n                    Slide Down\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      dispatch(\n                        openSnackbar({\n                          open: true,\n                          message: 'This is an grow message!',\n                          transition: 'Grow'\n                        })\n                      )\n                    }\n                  >\n                    Grow\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n};\n\nexport default ComponentSnackbar;\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CAEA;;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,eAA7B,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AACA,OAAOC,iBAAP,MAA8B,gDAA9B;AACA,SAASC,YAAT,QAA6B,yBAA7B,C,CAEA;;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;EAAA;;EAC9B,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EAEA,MAAMU,uBAAuB,GAAI;AACntrHE;EAuHA,MAAMC,uBAAuB,GAAI;AACnrGE;EAuGA,MAAMC,wBAAwB,GAAI;AACptC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAnFE;EAqFA,MAAMC,6BAA6B,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module"}