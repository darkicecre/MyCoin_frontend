{"ast":null,"code":"// third-party\nimport jwt from 'jsonwebtoken'; // project imports\n\nimport services from 'utils/mockAdapter';\nimport { JWT_API } from 'config';\nimport users from 'data/account'; // constant\n\nconst JWT_SECRET = JWT_API.secret;\nconst JWT_EXPIRES_TIME = JWT_API.timeout;\n\nconst delay = timeout => new Promise(res => setTimeout(res, timeout)); // ==============================|| MOCK SERVICES - JWT ACCOUNT ||============================== //\n\n\nservices.onPost('/api/account/login').reply(async request => {\n  try {\n    await delay(500);\n    const {\n      email,\n      password\n    } = JSON.parse(request.data);\n    let newUsers = users;\n\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      newUsers = JSON.parse(localUsers);\n    }\n\n    const user = newUsers.find(_user => _user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'Verify Your Email & Password'\n      }];\n    }\n\n    if (user.password !== password) {\n      return [400, {\n        message: 'Invalid Password'\n      }];\n    }\n\n    const serviceToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_TIME\n    });\n    return [200, {\n      serviceToken,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onPost('/api/account/register').reply(async request => {\n  try {\n    await delay(500);\n    const {\n      id,\n      email,\n      password,\n      firstName,\n      lastName\n    } = JSON.parse(request.data);\n\n    if (!email || !password) {\n      return [400, {\n        message: 'Enter Your Email & Password'\n      }];\n    }\n\n    if (!firstName || !lastName) {\n      return [400, {\n        message: 'Enter Your Name'\n      }];\n    }\n\n    const result = users.push({\n      id,\n      email,\n      password,\n      name: `${firstName} ${lastName}`\n    });\n    return [200, {\n      users: result\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onGet('/api/account/me').reply(request => {\n  try {\n    const {\n      Authorization\n    } = request.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Token Missing'\n      }];\n    }\n\n    let newUsers = users;\n\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      newUsers = JSON.parse(localUsers);\n    }\n\n    const serviceToken = Authorization.toString();\n    const jwData = jwt.verify(serviceToken, JWT_SECRET);\n    const {\n      userId\n    } = jwData;\n    const user = newUsers.find(_user => _user.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid Token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});","map":{"version":3,"names":["jwt","services","JWT_API","users","JWT_SECRET","secret","JWT_EXPIRES_TIME","timeout","delay","Promise","res","setTimeout","onPost","reply","request","email","password","JSON","parse","data","newUsers","window","localStorage","getItem","undefined","localUsers","user","find","_user","message","serviceToken","sign","userId","id","expiresIn","name","err","console","error","firstName","lastName","result","push","onGet","Authorization","headers","toString","jwData","verify"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/_api/account.ts"],"sourcesContent":["// third-party\nimport jwt from 'jsonwebtoken';\n\n// project imports\nimport services from 'utils/mockAdapter';\nimport { JWT_API } from 'config';\nimport { JWTDataProps } from 'types/auth';\nimport users from 'data/account';\n\n// constant\nconst JWT_SECRET = JWT_API.secret;\nconst JWT_EXPIRES_TIME = JWT_API.timeout;\n\nconst delay = (timeout: number) => new Promise((res) => setTimeout(res, timeout));\n\n// ==============================|| MOCK SERVICES - JWT ACCOUNT ||============================== //\n\nservices.onPost('/api/account/login').reply(async (request) => {\n  try {\n    await delay(500);\n\n    const { email, password } = JSON.parse(request.data);\n\n    let newUsers = users;\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      newUsers = JSON.parse(localUsers!);\n    }\n\n    const user = newUsers.find((_user) => _user.email === email);\n\n    if (!user) {\n      return [400, { message: 'Verify Your Email & Password' }];\n    }\n\n    if (user.password !== password) {\n      return [400, { message: 'Invalid Password' }];\n    }\n\n    const serviceToken = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_TIME });\n\n    return [\n      200,\n      {\n        serviceToken,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name\n        }\n      }\n    ];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Server Error' }];\n  }\n});\n\nservices.onPost('/api/account/register').reply(async (request) => {\n  try {\n    await delay(500);\n\n    const { id, email, password, firstName, lastName } = JSON.parse(request.data);\n\n    if (!email || !password) {\n      return [400, { message: 'Enter Your Email & Password' }];\n    }\n\n    if (!firstName || !lastName) {\n      return [400, { message: 'Enter Your Name' }];\n    }\n\n    const result = users.push({\n      id,\n      email,\n      password,\n      name: `${firstName} ${lastName}`\n    });\n\n    return [200, { users: result }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Server Error' }];\n  }\n});\n\nservices.onGet('/api/account/me').reply((request) => {\n  try {\n    const { Authorization } = request.headers!;\n\n    if (!Authorization) {\n      return [401, { message: 'Token Missing' }];\n    }\n\n    let newUsers = users;\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      newUsers = JSON.parse(localUsers!);\n    }\n\n    const serviceToken = Authorization!.toString();\n    const jwData = jwt.verify(serviceToken, JWT_SECRET);\n    const { userId } = jwData as JWTDataProps;\n    const user = newUsers.find((_user) => _user.id === userId);\n\n    if (!user) {\n      return [401, { message: 'Invalid Token' }];\n    }\n\n    return [\n      200,\n      {\n        user: {\n          id: user.id,\n          email: user.email\n        }\n      }\n    ];\n  } catch (err) {\n    return [500, { message: 'Server Error' }];\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}