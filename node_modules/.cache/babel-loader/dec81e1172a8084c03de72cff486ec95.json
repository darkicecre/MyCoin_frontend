{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\n\nclass DragSourceMonitorImpl {\n  receiveHandlerId(sourceId) {\n    this.sourceId = sourceId;\n  }\n\n  getHandlerId() {\n    return this.sourceId;\n  }\n\n  canDrag() {\n    (0, _invariant).invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingCanDrag = true;\n      return this.internalMonitor.canDragSource(this.sourceId);\n    } finally {\n      isCallingCanDrag = false;\n    }\n  }\n\n  isDragging() {\n    if (!this.sourceId) {\n      return false;\n    }\n\n    (0, _invariant).invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingIsDragging = true;\n      return this.internalMonitor.isDraggingSource(this.sourceId);\n    } finally {\n      isCallingIsDragging = false;\n    }\n  }\n\n  subscribeToStateChange(listener, options) {\n    return this.internalMonitor.subscribeToStateChange(listener, options);\n  }\n\n  isDraggingSource(sourceId) {\n    return this.internalMonitor.isDraggingSource(sourceId);\n  }\n\n  isOverTarget(targetId, options) {\n    return this.internalMonitor.isOverTarget(targetId, options);\n  }\n\n  getTargetIds() {\n    return this.internalMonitor.getTargetIds();\n  }\n\n  isSourcePublic() {\n    return this.internalMonitor.isSourcePublic();\n  }\n\n  getSourceId() {\n    return this.internalMonitor.getSourceId();\n  }\n\n  subscribeToOffsetChange(listener) {\n    return this.internalMonitor.subscribeToOffsetChange(listener);\n  }\n\n  canDragSource(sourceId) {\n    return this.internalMonitor.canDragSource(sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    return this.internalMonitor.canDropOnTarget(targetId);\n  }\n\n  getItemType() {\n    return this.internalMonitor.getItemType();\n  }\n\n  getItem() {\n    return this.internalMonitor.getItem();\n  }\n\n  getDropResult() {\n    return this.internalMonitor.getDropResult();\n  }\n\n  didDrop() {\n    return this.internalMonitor.didDrop();\n  }\n\n  getInitialClientOffset() {\n    return this.internalMonitor.getInitialClientOffset();\n  }\n\n  getInitialSourceClientOffset() {\n    return this.internalMonitor.getInitialSourceClientOffset();\n  }\n\n  getSourceClientOffset() {\n    return this.internalMonitor.getSourceClientOffset();\n  }\n\n  getClientOffset() {\n    return this.internalMonitor.getClientOffset();\n  }\n\n  getDifferenceFromInitialOffset() {\n    return this.internalMonitor.getDifferenceFromInitialOffset();\n  }\n\n  constructor(manager) {\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n\n}\n\nexports.DragSourceMonitorImpl = DragSourceMonitorImpl;","map":{"version":3,"mappings":"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","names":["isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","receiveHandlerId","sourceId","getHandlerId","canDrag","invariant","internalMonitor","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset","manager","getMonitor"],"sources":["../../../src/internals/DragSourceMonitorImpl.ts"],"sourcesContent":["import type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tUnsubscribe,\n\tListener,\n\tIdentifier,\n\tXYCoord,\n} from 'dnd-core'\nimport { invariant } from '@react-dnd/invariant'\nimport type { DragSourceMonitor } from '../types/index.js'\n\nlet isCallingCanDrag = false\nlet isCallingIsDragging = false\n\nexport class DragSourceMonitorImpl implements DragSourceMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate sourceId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(sourceId: Identifier | null): void {\n\t\tthis.sourceId = sourceId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.sourceId\n\t}\n\n\tpublic canDrag(): boolean {\n\t\tinvariant(\n\t\t\t!isCallingCanDrag,\n\t\t\t'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrag = true\n\t\t\treturn this.internalMonitor.canDragSource(this.sourceId as Identifier)\n\t\t} finally {\n\t\t\tisCallingCanDrag = false\n\t\t}\n\t}\n\n\tpublic isDragging(): boolean {\n\t\tif (!this.sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingIsDragging,\n\t\t\t'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingIsDragging = true\n\t\t\treturn this.internalMonitor.isDraggingSource(this.sourceId)\n\t\t} finally {\n\t\t\tisCallingIsDragging = false\n\t\t}\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic isDraggingSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.isDraggingSource(sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: Identifier,\n\t\toptions?: { shallow: boolean },\n\t): boolean {\n\t\treturn this.internalMonitor.isOverTarget(targetId, options)\n\t}\n\n\tpublic getTargetIds(): Identifier[] {\n\t\treturn this.internalMonitor.getTargetIds()\n\t}\n\n\tpublic isSourcePublic(): boolean | null {\n\t\treturn this.internalMonitor.isSourcePublic()\n\t}\n\n\tpublic getSourceId(): Identifier | null {\n\t\treturn this.internalMonitor.getSourceId()\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToOffsetChange(listener)\n\t}\n\n\tpublic canDragSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDragSource(sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDropOnTarget(targetId)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}