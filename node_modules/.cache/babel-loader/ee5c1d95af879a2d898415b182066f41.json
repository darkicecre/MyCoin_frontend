{"ast":null,"code":"var _jsxFileName = \"/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/pages/components-overview/dialogs.tsx\";\n// material-ui\nimport { Grid } from '@mui/material'; // project import\n\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport SimpleDialog from 'sections/components-overview/dialogs/SimpleDialog';\nimport AlertDialog from 'sections/components-overview/dialogs/AlertDialog';\nimport FormDialog from 'sections/components-overview/dialogs/FormDialog';\nimport TransitionsDialog from 'sections/components-overview/dialogs/TransitionsDialog';\nimport CustomizedDialog from 'sections/components-overview/dialogs/CustomizedDialog';\nimport FullScreenDialog from 'sections/components-overview/dialogs/FullScreenDialog';\nimport SizesDialog from 'sections/components-overview/dialogs/SizesDialog';\nimport ResponsiveDialog from 'sections/components-overview/dialogs/ResponsiveDialog';\nimport DraggableDialog from 'sections/components-overview/dialogs/DraggableDialog';\nimport ScrollDialog from 'sections/components-overview/dialogs/ScrollDialog';\nimport ConfirmationDialog from 'sections/components-overview/dialogs/ConfirmationDialog'; // ==============================|| COMPONENTS - DIALOGS ||============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dialogs = () => {\n  const basicDialogCodeString = `// SimpleDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open simple dialog\n</Button>\n<Dialog onClose={handleClose} open={open}>\n  <Grid\n    container\n    spacing={2}\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    sx={{ borderBottom: '1px solid {theme.palette.divider}' }}\n  >\n    <Grid item>\n      <DialogTitle>Set backup account</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n\n  <List sx={{ p: 2.5 }}>\n    {emails.map((email, index) => (\n      <ListItem button onClick={() => handleListItemClick(email)} key={email} selected={selectedValue === email} sx={{ p: 1.25 }}>\n        <ListItemAvatar>\n          <Avatar src={avatarImage('./avatar-{index + 1}.png').default} />\n        </ListItemAvatar>\n        <ListItemText primary={email} />\n      </ListItem>\n    ))}\n    <ListItem autoFocus button onClick={() => handleListItemClick('addAccount')} sx={{ p: 1.25 }}>\n      <ListItemAvatar>\n        <Avatar sx={{ bgcolor: 'primary.lighter', color: 'primary.main', width: 32, height: 32 }}>\n          <PlusOutlined style={{ fontSize: '0.625rem' }} />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary=\"Add Account\" />\n    </ListItem>\n  </List>\n</Dialog>`;\n  const alertcDialogCodeString = `// AlertDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open alert dialog\n</Button>\n<Dialog open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n<Box sx={{ p: 1, py: 1.5 }}>\n  <DialogTitle id=\"alert-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n  <DialogContent>\n    <DialogContentText id=\"alert-dialog-description\">\n      Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n    </DialogContentText>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Disagree\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} autoFocus>\n      Agree\n    </Button>\n  </DialogActions>\n</Box>\n</Dialog>`;\n  const formDialogCodeString = `// FormDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open form dialog\n</Button>\n<Dialog open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Subscribe</DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n  const transitionsDialogCodeString = ` // TransitionsDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Slide in dialog\n</Button>\n<Dialog\n  open={open}\n  TransitionComponent={Transition}\n  keepMounted\n  onClose={handleClose}\n  aria-describedby=\"alert-dialog-slide-description\"\n>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Use Google&apos;ss location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-slide-description\">\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n  const customizedDialogCodeString = `// CustomizedDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open dialog\n</Button>\n<BootstrapDialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n  <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n    Modal Title\n  </BootstrapDialogTitle>\n  <DialogContent dividers sx={{ p: 3 }}>\n    <Typography variant=\"h6\" gutterBottom>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus,\n      porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus\n      sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n    </Typography>\n    <Typography variant=\"h6\" gutterBottom>\n      Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed\n      odio dui. Donec ullamcorper nulla non metus auctor fringilla.\n    </Typography>\n  </DialogContent>\n  <DialogActions>\n    <Button variant=\"contained\" autoFocus onClick={handleClose}>\n      Save changes\n    </Button>\n  </DialogActions>\n</BootstrapDialog>`;\n  const fullscreenDialogCodeString = `// FullScreenDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open full-screen dialog\n</Button>\n<Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n  <AppBar sx={{ position: 'relative', boxShadow: 'none' }}>\n    <Toolbar>\n      <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n        <CloseOutlined />\n      </IconButton>\n      <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\n        Set Backup Account\n      </Typography>\n      <Button autoFocus color=\"inherit\" onClick={handleClose}>\n        save\n      </Button>\n    </Toolbar>\n  </AppBar>\n  <List sx={{ p: 3 }}>\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-1.png').default} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Phone ringtone\" secondary=\"Default\" />\n    </ListItem>\n    <Divider />\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-2.png').default} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n  </List>\n</Dialog>`;\n  const sizesDialogCodeString = `// SizesDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open max-width dialog\n</Button>\n<Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Optional sizes</DialogTitle>\n    <DialogContent>\n      <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 1 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Max Width :</Typography>\n        </Grid>\n        <Grid item>\n          <FormControl sx={{ minWidth: 120 }}>\n            <Select\n              autoFocus\n              value={maxWidth}\n              onChange={handleMaxWidthChange}\n              inputProps={{\n                name: 'max-width',\n                id: 'max-width'\n              }}\n            >\n              <MenuItem value={false as any}>false</MenuItem>\n              <MenuItem value=\"xs\">xs</MenuItem>\n              <MenuItem value=\"sm\">sm</MenuItem>\n              <MenuItem value=\"md\">md</MenuItem>\n              <MenuItem value=\"lg\">lg</MenuItem>\n              <MenuItem value=\"xl\">xl</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 0.25 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Full Width:</Typography>\n        </Grid>\n        <Grid item>\n          <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n        </Grid>\n      </Grid>\n    </DialogContent>\n    <DialogActions>\n      <Button variant=\"outlined\" color=\"error\" onClick={handleClose}>\n        Close\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n  const responsiveDialogCodeString = `// ResponsiveDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open responsive dialog\n</Button>\n<Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle id=\"responsive-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose} autoFocus>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n  const draggaleDialogCodeString = `// DraggableDialog\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open draggable dialog\n</Button>\n<Dialog open={open} onClose={handleClose} PaperComponent={PaperComponent} aria-labelledby=\"draggable-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n      Subscribe\n    </DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n  const scrollingDialogCodeString = `// ScrollDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen('paper')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=paper\n</Button>\n<Button variant=\"outlined\" onClick={handleClickOpen('body')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=body\n</Button>\n<Dialog\n  open={open}\n  onClose={handleClose}\n  scroll={scroll}\n  aria-labelledby=\"scroll-dialog-title\"\n  aria-describedby=\"scroll-dialog-description\"\n>\n  <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n    <Grid item>\n      <DialogTitle>Subscribe</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n  <DialogContent dividers>\n    <Grid container spacing={1.25}>\n      {[...new Array(25)].map((i, index) => (\n        <Grid item key={'{index}-{scroll}'}>\n          <Typography variant=\"h6\">\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac in, egestas eget quam. Morbi leo risus,\n            porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n          </Typography>\n        </Grid>\n      ))}\n    </Grid>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} sx={{ mr: 1 }}>\n      Subscribe\n    </Button>\n  </DialogActions>\n</Dialog>`;\n  const confirmDialogCodeString = `// ConfirmationDialog.tsx\n<Box sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n  <List component=\"div\" role=\"group\">\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Interruptions\" />\n    </ListItem>\n    <ListItem\n      button\n      divider\n      aria-haspopup=\"true\"\n      aria-controls=\"ringtone-menu\"\n      aria-label=\"phone ringtone\"\n      onClick={handleClickListItem}\n    >\n      <ListItemText primary=\"Phone Ringtone\" secondary={value} />\n    </ListItem>\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Default Notification Ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n    <ConfirmationDialogRaw id=\"ringtone-menu\" keepMounted open={open} onClose={handleClose} value={value} />\n  </List>\n</Box>\n<Dialog\n  sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\n  maxWidth={matchDownMD ? 'sm' : 'lg'}\n  TransitionProps={{ onEntering: handleEntering }}\n  open={open}\n  {...other}\n>\n  <DialogTitle>Phone Ringtone</DialogTitle>\n  <DialogContent dividers>\n    <RadioGroup row={!matchDownMD} ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange}>\n      {options.map((option) => (\n        <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n      ))}\n    </RadioGroup>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" autoFocus onClick={handleCancel}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleOk} sx={{ mr: 0.5 }}>\n      Done\n    </Button>\n  </DialogActions>\n</Dialog>`;\n  return /*#__PURE__*/_jsxDEV(ComponentSkeleton, {\n    children: [/*#__PURE__*/_jsxDEV(ComponentHeader, {\n      title: \"Dialog\",\n      caption: \"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.\",\n      directory: \"src/pages/components-overview/dialogs\",\n      link: \"https://mui.com/material-ui/react-dialog/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComponentWrapper, {\n      sx: {\n        '& .MuiCardContent-root': {\n          textAlign: 'center'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Basic\",\n            codeString: basicDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(SimpleDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Alert\",\n            codeString: alertcDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(AlertDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Form\",\n            codeString: formDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(FormDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Transitions\",\n            codeString: transitionsDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(TransitionsDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Customized\",\n            codeString: customizedDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(CustomizedDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Full Screen\",\n            codeString: fullscreenDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(FullScreenDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Sizes\",\n            codeString: sizesDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(SizesDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Responsive\",\n            codeString: responsiveDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(ResponsiveDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Draggable\",\n            codeString: draggaleDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(DraggableDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Scrolling\",\n            codeString: scrollingDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(ScrollDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(MainCard, {\n            title: \"Confirmation\",\n            codeString: confirmDialogCodeString,\n            children: /*#__PURE__*/_jsxDEV(ConfirmationDialog, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"names":["Grid","MainCard","ComponentHeader","ComponentWrapper","ComponentSkeleton","SimpleDialog","AlertDialog","FormDialog","TransitionsDialog","CustomizedDialog","FullScreenDialog","SizesDialog","ResponsiveDialog","DraggableDialog","ScrollDialog","ConfirmationDialog","Dialogs","basicDialogCodeString","alertcDialogCodeString","formDialogCodeString","transitionsDialogCodeString","customizedDialogCodeString","fullscreenDialogCodeString","sizesDialogCodeString","responsiveDialogCodeString","draggaleDialogCodeString","scrollingDialogCodeString","confirmDialogCodeString","textAlign"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/pages/components-overview/dialogs.tsx"],"sourcesContent":["// material-ui\nimport { Grid } from '@mui/material';\n\n// project import\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport SimpleDialog from 'sections/components-overview/dialogs/SimpleDialog';\nimport AlertDialog from 'sections/components-overview/dialogs/AlertDialog';\nimport FormDialog from 'sections/components-overview/dialogs/FormDialog';\nimport TransitionsDialog from 'sections/components-overview/dialogs/TransitionsDialog';\nimport CustomizedDialog from 'sections/components-overview/dialogs/CustomizedDialog';\nimport FullScreenDialog from 'sections/components-overview/dialogs/FullScreenDialog';\nimport SizesDialog from 'sections/components-overview/dialogs/SizesDialog';\nimport ResponsiveDialog from 'sections/components-overview/dialogs/ResponsiveDialog';\nimport DraggableDialog from 'sections/components-overview/dialogs/DraggableDialog';\nimport ScrollDialog from 'sections/components-overview/dialogs/ScrollDialog';\nimport ConfirmationDialog from 'sections/components-overview/dialogs/ConfirmationDialog';\n\n// ==============================|| COMPONENTS - DIALOGS ||============================== //\n\nconst Dialogs = () => {\n  const basicDialogCodeString = `// SimpleDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open simple dialog\n</Button>\n<Dialog onClose={handleClose} open={open}>\n  <Grid\n    container\n    spacing={2}\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    sx={{ borderBottom: '1px solid {theme.palette.divider}' }}\n  >\n    <Grid item>\n      <DialogTitle>Set backup account</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n\n  <List sx={{ p: 2.5 }}>\n    {emails.map((email, index) => (\n      <ListItem button onClick={() => handleListItemClick(email)} key={email} selected={selectedValue === email} sx={{ p: 1.25 }}>\n        <ListItemAvatar>\n          <Avatar src={avatarImage('./avatar-{index + 1}.png').default} />\n        </ListItemAvatar>\n        <ListItemText primary={email} />\n      </ListItem>\n    ))}\n    <ListItem autoFocus button onClick={() => handleListItemClick('addAccount')} sx={{ p: 1.25 }}>\n      <ListItemAvatar>\n        <Avatar sx={{ bgcolor: 'primary.lighter', color: 'primary.main', width: 32, height: 32 }}>\n          <PlusOutlined style={{ fontSize: '0.625rem' }} />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary=\"Add Account\" />\n    </ListItem>\n  </List>\n</Dialog>`;\n\n  const alertcDialogCodeString = `// AlertDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open alert dialog\n</Button>\n<Dialog open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n<Box sx={{ p: 1, py: 1.5 }}>\n  <DialogTitle id=\"alert-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n  <DialogContent>\n    <DialogContentText id=\"alert-dialog-description\">\n      Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n    </DialogContentText>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Disagree\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} autoFocus>\n      Agree\n    </Button>\n  </DialogActions>\n</Box>\n</Dialog>`;\n\n  const formDialogCodeString = `// FormDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open form dialog\n</Button>\n<Dialog open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Subscribe</DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const transitionsDialogCodeString = ` // TransitionsDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Slide in dialog\n</Button>\n<Dialog\n  open={open}\n  TransitionComponent={Transition}\n  keepMounted\n  onClose={handleClose}\n  aria-describedby=\"alert-dialog-slide-description\"\n>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Use Google&apos;ss location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-slide-description\">\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const customizedDialogCodeString = `// CustomizedDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open dialog\n</Button>\n<BootstrapDialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n  <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n    Modal Title\n  </BootstrapDialogTitle>\n  <DialogContent dividers sx={{ p: 3 }}>\n    <Typography variant=\"h6\" gutterBottom>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus,\n      porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus\n      sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n    </Typography>\n    <Typography variant=\"h6\" gutterBottom>\n      Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed\n      odio dui. Donec ullamcorper nulla non metus auctor fringilla.\n    </Typography>\n  </DialogContent>\n  <DialogActions>\n    <Button variant=\"contained\" autoFocus onClick={handleClose}>\n      Save changes\n    </Button>\n  </DialogActions>\n</BootstrapDialog>`;\n\n  const fullscreenDialogCodeString = `// FullScreenDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open full-screen dialog\n</Button>\n<Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n  <AppBar sx={{ position: 'relative', boxShadow: 'none' }}>\n    <Toolbar>\n      <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n        <CloseOutlined />\n      </IconButton>\n      <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\n        Set Backup Account\n      </Typography>\n      <Button autoFocus color=\"inherit\" onClick={handleClose}>\n        save\n      </Button>\n    </Toolbar>\n  </AppBar>\n  <List sx={{ p: 3 }}>\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-1.png').default} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Phone ringtone\" secondary=\"Default\" />\n    </ListItem>\n    <Divider />\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-2.png').default} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n  </List>\n</Dialog>`;\n\n  const sizesDialogCodeString = `// SizesDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open max-width dialog\n</Button>\n<Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Optional sizes</DialogTitle>\n    <DialogContent>\n      <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 1 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Max Width :</Typography>\n        </Grid>\n        <Grid item>\n          <FormControl sx={{ minWidth: 120 }}>\n            <Select\n              autoFocus\n              value={maxWidth}\n              onChange={handleMaxWidthChange}\n              inputProps={{\n                name: 'max-width',\n                id: 'max-width'\n              }}\n            >\n              <MenuItem value={false as any}>false</MenuItem>\n              <MenuItem value=\"xs\">xs</MenuItem>\n              <MenuItem value=\"sm\">sm</MenuItem>\n              <MenuItem value=\"md\">md</MenuItem>\n              <MenuItem value=\"lg\">lg</MenuItem>\n              <MenuItem value=\"xl\">xl</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 0.25 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Full Width:</Typography>\n        </Grid>\n        <Grid item>\n          <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n        </Grid>\n      </Grid>\n    </DialogContent>\n    <DialogActions>\n      <Button variant=\"outlined\" color=\"error\" onClick={handleClose}>\n        Close\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const responsiveDialogCodeString = `// ResponsiveDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open responsive dialog\n</Button>\n<Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle id=\"responsive-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose} autoFocus>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const draggaleDialogCodeString = `// DraggableDialog\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open draggable dialog\n</Button>\n<Dialog open={open} onClose={handleClose} PaperComponent={PaperComponent} aria-labelledby=\"draggable-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n      Subscribe\n    </DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const scrollingDialogCodeString = `// ScrollDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen('paper')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=paper\n</Button>\n<Button variant=\"outlined\" onClick={handleClickOpen('body')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=body\n</Button>\n<Dialog\n  open={open}\n  onClose={handleClose}\n  scroll={scroll}\n  aria-labelledby=\"scroll-dialog-title\"\n  aria-describedby=\"scroll-dialog-description\"\n>\n  <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n    <Grid item>\n      <DialogTitle>Subscribe</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n  <DialogContent dividers>\n    <Grid container spacing={1.25}>\n      {[...new Array(25)].map((i, index) => (\n        <Grid item key={'{index}-{scroll}'}>\n          <Typography variant=\"h6\">\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac in, egestas eget quam. Morbi leo risus,\n            porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n          </Typography>\n        </Grid>\n      ))}\n    </Grid>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} sx={{ mr: 1 }}>\n      Subscribe\n    </Button>\n  </DialogActions>\n</Dialog>`;\n\n  const confirmDialogCodeString = `// ConfirmationDialog.tsx\n<Box sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n  <List component=\"div\" role=\"group\">\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Interruptions\" />\n    </ListItem>\n    <ListItem\n      button\n      divider\n      aria-haspopup=\"true\"\n      aria-controls=\"ringtone-menu\"\n      aria-label=\"phone ringtone\"\n      onClick={handleClickListItem}\n    >\n      <ListItemText primary=\"Phone Ringtone\" secondary={value} />\n    </ListItem>\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Default Notification Ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n    <ConfirmationDialogRaw id=\"ringtone-menu\" keepMounted open={open} onClose={handleClose} value={value} />\n  </List>\n</Box>\n<Dialog\n  sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\n  maxWidth={matchDownMD ? 'sm' : 'lg'}\n  TransitionProps={{ onEntering: handleEntering }}\n  open={open}\n  {...other}\n>\n  <DialogTitle>Phone Ringtone</DialogTitle>\n  <DialogContent dividers>\n    <RadioGroup row={!matchDownMD} ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange}>\n      {options.map((option) => (\n        <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n      ))}\n    </RadioGroup>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" autoFocus onClick={handleCancel}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleOk} sx={{ mr: 0.5 }}>\n      Done\n    </Button>\n  </DialogActions>\n</Dialog>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Dialog\"\n        caption=\"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.\"\n        directory=\"src/pages/components-overview/dialogs\"\n        link=\"https://mui.com/material-ui/react-dialog/\"\n      />\n      <ComponentWrapper sx={{ '& .MuiCardContent-root': { textAlign: 'center' } }}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Basic\" codeString={basicDialogCodeString}>\n              <SimpleDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Alert\" codeString={alertcDialogCodeString}>\n              <AlertDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Form\" codeString={formDialogCodeString}>\n              <FormDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Transitions\" codeString={transitionsDialogCodeString}>\n              <TransitionsDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Customized\" codeString={customizedDialogCodeString}>\n              <CustomizedDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Full Screen\" codeString={fullscreenDialogCodeString}>\n              <FullScreenDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Sizes\" codeString={sizesDialogCodeString}>\n              <SizesDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Responsive\" codeString={responsiveDialogCodeString}>\n              <ResponsiveDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Draggable\" codeString={draggaleDialogCodeString}>\n              <DraggableDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Scrolling\" codeString={scrollingDialogCodeString}>\n              <ScrollDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Confirmation\" codeString={confirmDialogCodeString}>\n              <ConfirmationDialog />\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n};\n\nexport default Dialogs;\n"],"mappings":";AAAA;AACA,SAASA,IAAT,QAAqB,eAArB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AACA,OAAOC,iBAAP,MAA8B,gDAA9B;AACA,OAAOC,YAAP,MAAyB,mDAAzB;AACA,OAAOC,WAAP,MAAwB,kDAAxB;AACA,OAAOC,UAAP,MAAuB,iDAAvB;AACA,OAAOC,iBAAP,MAA8B,wDAA9B;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,OAAOC,WAAP,MAAwB,kDAAxB;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,OAAOC,eAAP,MAA4B,sDAA5B;AACA,OAAOC,YAAP,MAAyB,mDAAzB;AACA,OAAOC,kBAAP,MAA+B,yDAA/B,C,CAEA;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EACpB,MAAMC,qBAAqB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAxCE;EA0CA,MAAMC,sBAAsB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UArBE;EAuBA,MAAMC,oBAAoB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAtBE;EAwBA,MAAMC,2BAA2B,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA3BE;EA6BA,MAAMC,0BAA0B,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAxBE;EA0BA,MAAMC,0BAA0B,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAjCE;EAmCA,MAAMC,qBAAqB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAjDE;EAmDA,MAAMC,0BAA0B,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UArBE;EAuBA,MAAMC,wBAAwB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAxBE;EA0BA,MAAMC,yBAAyB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA5CE;EA8CA,MAAMC,uBAAuB,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA7CE;EA+CA,oBACE,QAAC,iBAAD;IAAA,wBACE,QAAC,eAAD;MACE,KAAK,EAAC,QADR;MAEE,OAAO,EAAC,uHAFV;MAGE,SAAS,EAAC,uCAHZ;MAIE,IAAI,EAAC;IAJP;MAAA;MAAA;MAAA;IAAA,QADF,eAOE,QAAC,gBAAD;MAAkB,EAAE,EAAE;QAAE,0BAA0B;UAAEC,SAAS,EAAE;QAAb;MAA5B,CAAtB;MAAA,uBACE,QAAC,IAAD;QAAM,SAAS,MAAf;QAAgB,OAAO,EAAE,CAAzB;QAAA,wBACE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,OAAhB;YAAwB,UAAU,EAAEX,qBAApC;YAAA,uBACE,QAAC,YAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,eAME,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,OAAhB;YAAwB,UAAU,EAAEC,sBAApC;YAAA,uBACE,QAAC,WAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QANF,eAWE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,MAAhB;YAAuB,UAAU,EAAEC,oBAAnC;YAAA,uBACE,QAAC,UAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAXF,eAgBE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,aAAhB;YAA8B,UAAU,EAAEC,2BAA1C;YAAA,uBACE,QAAC,iBAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAhBF,eAqBE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,YAAhB;YAA6B,UAAU,EAAEC,0BAAzC;YAAA,uBACE,QAAC,gBAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QArBF,eA0BE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,aAAhB;YAA8B,UAAU,EAAEC,0BAA1C;YAAA,uBACE,QAAC,gBAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QA1BF,eA+BE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,OAAhB;YAAwB,UAAU,EAAEC,qBAApC;YAAA,uBACE,QAAC,WAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QA/BF,eAoCE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,YAAhB;YAA6B,UAAU,EAAEC,0BAAzC;YAAA,uBACE,QAAC,gBAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QApCF,eAyCE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,WAAhB;YAA4B,UAAU,EAAEC,wBAAxC;YAAA,uBACE,QAAC,eAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAzCF,eA8CE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,WAAhB;YAA4B,UAAU,EAAEC,yBAAxC;YAAA,uBACE,QAAC,YAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QA9CF,eAmDE,QAAC,IAAD;UAAM,IAAI,MAAV;UAAW,EAAE,EAAE,EAAf;UAAmB,EAAE,EAAE,CAAvB;UAA0B,EAAE,EAAE,CAA9B;UAAA,uBACE,QAAC,QAAD;YAAU,KAAK,EAAC,cAAhB;YAA+B,UAAU,EAAEC,uBAA3C;YAAA,uBACE,QAAC,kBAAD;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAnDF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqED,CA1bD;;KAAMX,O;AA4bN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}