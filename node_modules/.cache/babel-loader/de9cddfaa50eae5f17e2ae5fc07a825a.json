{"ast":null,"code":"var _jsxFileName = \"/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/sections/components-overview/autocomplete/CreatableAutocomplete.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // material-ui\n\nimport { createFilterOptions, Autocomplete, TextField } from '@mui/material'; // project import\n\nimport MainCard from 'components/MainCard';\nimport dataCreatable from 'data/movies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = dataCreatable;\nconst filter = createFilterOptions(); // ==============================|| AUTOCOMPLETE - CREATABLE ||============================== //\n\nexport default function CreatableAutocomplete() {\n  _s();\n\n  const [value, setValue] = useState(null);\n  const createAutocompleteCodeString = `<Autocomplete\n  fullWidth\n  value={value}\n  onChange={(event, newValue) => {\n    if (typeof newValue === 'string') {\n      setValue({\n        label: newValue\n      });\n    } else if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n    } else {\n      setValue(newValue);\n    }\n  }}\n  filterOptions={(options, params) => {\n    const filtered = filter(options, params);\n\n    const { inputValue } = params;\n\n    const isExisting = options.some((option) => inputValue === option.label);\n    if (inputValue !== '' && !isExisting) {\n      filtered.push({\n        inputValue,\n        label: 'Add {inputValue}'\n      });\n    }\n\n    return filtered;\n  }}\n  selectOnFocus\n  clearOnBlur\n  handleHomeEndKeys\n  id=\"free-solo-with-text-demo\"\n  options={data}\n  getOptionLabel={(option) => {\n    // Value selected with enter, right from the input\n    if (typeof option === 'string') {\n      return option;\n    }\n    // Add \"xxx\" option created dynamically\n    if (option.inputValue) {\n      return option.inputValue;\n    }\n    // Regular option\n    return option.label;\n  }}\n  renderOption={(props, option) => <li {...props}>{option.label}</li>}\n  freeSolo\n  renderInput={(params) => <TextField {...params} label=\"Free solo with text demo\" />}\n/>`;\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    title: \"Creatable\",\n    codeString: createAutocompleteCodeString,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      fullWidth: true,\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            label: newValue\n          });\n        } else if (newValue && newValue.inputValue) {\n          setValue({\n            label: newValue.inputValue\n          });\n        } else {\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n        const {\n          inputValue\n        } = params;\n        const isExisting = options.some(option => inputValue === option.label);\n\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            label: `Add \"${inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      id: \"free-solo-with-text-demo\",\n      options: data,\n      getOptionLabel: option => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        } // Add \"xxx\" option created dynamically\n\n\n        if (option.inputValue) {\n          return option.inputValue;\n        } // Regular option\n\n\n        return option.label;\n      },\n      renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n        children: option.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 42\n      }, this),\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Free solo with text demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreatableAutocomplete, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = CreatableAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatableAutocomplete\");","map":{"version":3,"names":["useState","createFilterOptions","Autocomplete","TextField","MainCard","dataCreatable","data","filter","CreatableAutocomplete","value","setValue","createAutocompleteCodeString","event","newValue","label","inputValue","options","params","filtered","isExisting","some","option","push","props"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/sections/components-overview/autocomplete/CreatableAutocomplete.tsx"],"sourcesContent":["import { useState } from 'react';\n\n// material-ui\nimport { createFilterOptions, Autocomplete, TextField } from '@mui/material';\n\n// project import\nimport MainCard from 'components/MainCard';\nimport dataCreatable from 'data/movies';\n\ninterface FilmOptionType {\n  inputValue?: string;\n  label: string;\n  year?: number;\n}\n\nconst data: readonly FilmOptionType[] = dataCreatable;\n\nconst filter = createFilterOptions<FilmOptionType>();\n\n// ==============================|| AUTOCOMPLETE - CREATABLE ||============================== //\n\nexport default function CreatableAutocomplete() {\n  const [value, setValue] = useState<FilmOptionType | null>(null);\n\n  const createAutocompleteCodeString = `<Autocomplete\n  fullWidth\n  value={value}\n  onChange={(event, newValue) => {\n    if (typeof newValue === 'string') {\n      setValue({\n        label: newValue\n      });\n    } else if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n    } else {\n      setValue(newValue);\n    }\n  }}\n  filterOptions={(options, params) => {\n    const filtered = filter(options, params);\n\n    const { inputValue } = params;\n\n    const isExisting = options.some((option) => inputValue === option.label);\n    if (inputValue !== '' && !isExisting) {\n      filtered.push({\n        inputValue,\n        label: 'Add {inputValue}'\n      });\n    }\n\n    return filtered;\n  }}\n  selectOnFocus\n  clearOnBlur\n  handleHomeEndKeys\n  id=\"free-solo-with-text-demo\"\n  options={data}\n  getOptionLabel={(option) => {\n    // Value selected with enter, right from the input\n    if (typeof option === 'string') {\n      return option;\n    }\n    // Add \"xxx\" option created dynamically\n    if (option.inputValue) {\n      return option.inputValue;\n    }\n    // Regular option\n    return option.label;\n  }}\n  renderOption={(props, option) => <li {...props}>{option.label}</li>}\n  freeSolo\n  renderInput={(params) => <TextField {...params} label=\"Free solo with text demo\" />}\n/>`;\n\n  return (\n    <MainCard title=\"Creatable\" codeString={createAutocompleteCodeString}>\n      <Autocomplete\n        fullWidth\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            setValue({\n              label: newValue\n            });\n          } else if (newValue && newValue.inputValue) {\n            setValue({\n              label: newValue.inputValue\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          const { inputValue } = params;\n\n          const isExisting = options.some((option) => inputValue === option.label);\n          if (inputValue !== '' && !isExisting) {\n            filtered.push({\n              inputValue,\n              label: `Add \"${inputValue}\"`\n            });\n          }\n\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        id=\"free-solo-with-text-demo\"\n        options={data}\n        getOptionLabel={(option) => {\n          // Value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          // Add \"xxx\" option created dynamically\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          // Regular option\n          return option.label;\n        }}\n        renderOption={(props, option) => <li {...props}>{option.label}</li>}\n        freeSolo\n        renderInput={(params) => <TextField {...params} label=\"Free solo with text demo\" />}\n      />\n    </MainCard>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}