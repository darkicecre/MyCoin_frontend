{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBeginDrag = createBeginDrag;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _setClientOffsetJs = require(\"./local/setClientOffset.js\");\n\nvar _jsUtilsJs = require(\"../../utils/js_utils.js\");\n\nvar _typesJs = require(\"./types.js\");\n\nconst ResetCoordinatesAction = {\n  type: _typesJs.INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\n\nfunction createBeginDrag(manager) {\n  return function beginDrag() {\n    let sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    const {\n      publishSource = true,\n      clientOffset,\n      getSourceClientOffset\n    } = options;\n    const monitor = manager.getMonitor();\n    const registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch((0, _setClientOffsetJs).setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    const sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId == null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    let sourceClientOffset = null;\n\n    if (clientOffset) {\n      if (!getSourceClientOffset) {\n        throw new Error('getSourceClientOffset must be defined');\n      }\n\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch((0, _setClientOffsetJs).setClientOffset(clientOffset, sourceClientOffset));\n    const source = registry.getSource(sourceId);\n    const item = source.beginDrag(monitor, sourceId); // If source.beginDrag returns null, this is an indicator to cancel the drag\n\n    if (item == null) {\n      return undefined;\n    }\n\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    const itemType = registry.getSourceType(sourceId);\n    return {\n      type: _typesJs.BEGIN_DRAG,\n      payload: {\n        itemType,\n        item,\n        sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  (0, _invariant).invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    (0, _invariant).invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  (0, _invariant).invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  (0, _invariant).invariant((0, _jsUtilsJs).isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  let sourceId = null;\n\n  for (let i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}","map":{"version":3,"mappings":"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","names":["createBeginDrag","ResetCoordinatesAction","type","INIT_COORDS","payload","clientOffset","sourceClientOffset","manager","beginDrag","sourceIds","options","publishSource","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","setClientOffset","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","undefined","verifyItemIsObject","pinSource","itemType","getSourceType","BEGIN_DRAG","isSourcePublic","invariant","isDragging","forEach","isObject","i","length","canDragSource"],"sources":["../../../../src/actions/dragDrop/beginDrag.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type {\n\tAction,\n\tDragDropManager,\n\tXYCoord,\n\tBeginDragPayload,\n\tBeginDragOptions,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n} from '../../interfaces.js'\nimport { setClientOffset } from './local/setClientOffset.js'\nimport { isObject } from '../../utils/js_utils.js'\nimport { BEGIN_DRAG, INIT_COORDS } from './types.js'\n\nconst ResetCoordinatesAction = {\n\ttype: INIT_COORDS,\n\tpayload: {\n\t\tclientOffset: null,\n\t\tsourceClientOffset: null,\n\t},\n}\n\nexport function createBeginDrag(manager: DragDropManager) {\n\treturn function beginDrag(\n\t\tsourceIds: Identifier[] = [],\n\t\toptions: BeginDragOptions = {\n\t\t\tpublishSource: true,\n\t\t},\n\t): Action<BeginDragPayload> | undefined {\n\t\tconst {\n\t\t\tpublishSource = true,\n\t\t\tclientOffset,\n\t\t\tgetSourceClientOffset,\n\t\t}: BeginDragOptions = options\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\n\t\t// Initialize the coordinates using the client offset\n\t\tmanager.dispatch(setClientOffset(clientOffset))\n\n\t\tverifyInvariants(sourceIds, monitor, registry)\n\n\t\t// Get the draggable source\n\t\tconst sourceId = getDraggableSource(sourceIds, monitor)\n\t\tif (sourceId == null) {\n\t\t\tmanager.dispatch(ResetCoordinatesAction)\n\t\t\treturn\n\t\t}\n\n\t\t// Get the source client offset\n\t\tlet sourceClientOffset: XYCoord | null = null\n\t\tif (clientOffset) {\n\t\t\tif (!getSourceClientOffset) {\n\t\t\t\tthrow new Error('getSourceClientOffset must be defined')\n\t\t\t}\n\t\t\tverifyGetSourceClientOffsetIsFunction(getSourceClientOffset)\n\t\t\tsourceClientOffset = getSourceClientOffset(sourceId)\n\t\t}\n\n\t\t// Initialize the full coordinates\n\t\tmanager.dispatch(setClientOffset(clientOffset, sourceClientOffset))\n\n\t\tconst source = registry.getSource(sourceId)\n\t\tconst item = source.beginDrag(monitor, sourceId)\n\t\t// If source.beginDrag returns null, this is an indicator to cancel the drag\n\t\tif (item == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tverifyItemIsObject(item)\n\t\tregistry.pinSource(sourceId)\n\n\t\tconst itemType = registry.getSourceType(sourceId)\n\t\treturn {\n\t\t\ttype: BEGIN_DRAG,\n\t\t\tpayload: {\n\t\t\t\titemType,\n\t\t\t\titem,\n\t\t\t\tsourceId,\n\t\t\t\tclientOffset: clientOffset || null,\n\t\t\t\tsourceClientOffset: sourceClientOffset || null,\n\t\t\t\tisSourcePublic: !!publishSource,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction verifyInvariants(\n\tsourceIds: Identifier[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\tinvariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.')\n\tsourceIds.forEach(function (sourceId) {\n\t\tinvariant(\n\t\t\tregistry.getSource(sourceId),\n\t\t\t'Expected sourceIds to be registered.',\n\t\t)\n\t})\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset: any) {\n\tinvariant(\n\t\ttypeof getSourceClientOffset === 'function',\n\t\t'When clientOffset is provided, getSourceClientOffset must be a function.',\n\t)\n}\n\nfunction verifyItemIsObject(item: any) {\n\tinvariant(isObject(item), 'Item must be an object.')\n}\n\nfunction getDraggableSource(sourceIds: Identifier[], monitor: DragDropMonitor) {\n\tlet sourceId = null\n\tfor (let i = sourceIds.length - 1; i >= 0; i--) {\n\t\tif (monitor.canDragSource(sourceIds[i])) {\n\t\t\tsourceId = sourceIds[i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn sourceId\n}\n"]},"metadata":{},"sourceType":"script"}