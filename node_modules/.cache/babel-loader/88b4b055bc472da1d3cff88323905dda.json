{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _shallowequal = require(\"@react-dnd/shallowequal\");\n\nvar _wrapConnectorHooksJs = require(\"./wrapConnectorHooks.js\");\n\nvar _isRefJs = require(\"./isRef.js\");\n\nclass TargetConnector {\n  get connectTarget() {\n    return this.dropTarget;\n  }\n\n  reconnect() {\n    // if nothing has changed then don't resubscribe\n    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n\n    if (didChange) {\n      this.disconnectDropTarget();\n    }\n\n    const dropTarget = this.dropTarget;\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dropTarget) {\n      this.lastConnectedDropTarget = dropTarget;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDropTarget = dropTarget;\n      this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n    }\n  }\n\n  receiveHandlerId(newHandlerId) {\n    if (newHandlerId === this.handlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get dropTargetOptions() {\n    return this.dropTargetOptionsInternal;\n  }\n\n  set dropTargetOptions(options) {\n    this.dropTargetOptionsInternal = options;\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didDropTargetChange() {\n    return this.lastConnectedDropTarget !== this.dropTarget;\n  }\n\n  didOptionsChange() {\n    return !(0, _shallowequal).shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n  }\n\n  disconnectDropTarget() {\n    if (this.unsubscribeDropTarget) {\n      this.unsubscribeDropTarget();\n      this.unsubscribeDropTarget = undefined;\n    }\n  }\n\n  get dropTarget() {\n    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n  }\n\n  clearDropTarget() {\n    this.dropTargetRef = null;\n    this.dropTargetNode = null;\n  }\n\n  constructor(backend) {\n    this.hooks = (0, _wrapConnectorHooksJs).wrapConnectorHooks({\n      dropTarget: (node, options) => {\n        this.clearDropTarget();\n        this.dropTargetOptions = options;\n\n        if ((0, _isRefJs).isRef(node)) {\n          this.dropTargetRef = node;\n        } else {\n          this.dropTargetNode = node;\n        }\n\n        this.reconnect();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n\n}\n\nexports.TargetConnector = TargetConnector;","map":{"version":3,"mappings":"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","names":["TargetConnector","connectTarget","dropTarget","reconnect","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","handlerId","lastConnectedDropTarget","lastConnectedHandlerId","lastConnectedDropTargetOptions","dropTargetOptions","unsubscribeDropTarget","backend","connectDropTarget","receiveHandlerId","newHandlerId","dropTargetOptionsInternal","options","shallowEqual","undefined","dropTargetNode","dropTargetRef","current","clearDropTarget","hooks","wrapConnectorHooks","node","isRef"],"sources":["../../../src/internals/TargetConnector.ts"],"sourcesContent":["import type { RefObject } from 'react'\nimport { shallowEqual } from '@react-dnd/shallowequal'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\nimport type { Backend, Unsubscribe, Identifier } from 'dnd-core'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport type { DropTargetOptions } from '../types/index.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}