{"ast":null,"code":"var _jsxFileName = \"/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/sections/components-overview/buttons/ToggleButtons/index.tsx\";\n// material-ui\nimport { Stack } from '@mui/material'; // project import\n\nimport MainCard from 'components/MainCard';\nimport ExclusiveToggleButtons from './ExclusiveToggleButtons';\nimport MultipleToggleButtons from './MultipleToggleButtons';\nimport ColorToggleButton from './ColorToggleButton';\nimport TextToggleButtons from './TextToggleButtons';\nimport VariantToggleButtons from './VariantToggleButtons';\nimport VerticalToggleButtons from './VerticalToggleButtons'; // ==============================|| TOGGLE BUTTON ||============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toggleButtonCodeString = `// ExclusiveToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\" disabled sx={{ '&.Mui-disabled': { color: 'text.disabled' } }}>\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"text formatting\">\n  <ToggleButton value=\"bold\" aria-label=\"bold\">\n    <BoldOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"italic\" aria-label=\"italic\">\n    <ItalicOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n    <UnderlineOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n    <BgColorsOutlined />\n    <DownOutlined style={{ fontSize: '0.625rem', marginLeft: 6 }} />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup color=\"primary\" value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\">\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// TextToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"one\" aria-label=\"first\">\n    One\n  </ToggleButton>\n  <ToggleButton value=\"two\" aria-label=\"second\">\n    Two\n  </ToggleButton>\n  <ToggleButton value=\"three\" aria-label=\"third\">\n    Three\n  </ToggleButton>\n  <ToggleButton value=\"four\" aria-label=\"fourth\">\n    Four\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VariantToggleButtons.tsx\n<ToggleButtonGroup\n  value={alignment}\n  color=\"primary\"\n  exclusive\n  onChange={handleAlignment}\n  aria-label=\"text alignment\"\n  sx={{\n    '& .MuiToggleButton-root': {\n      '&:not(.Mui-selected)': {\n        borderTopColor: 'transparent',\n        borderBottomColor: 'transparent'\n      },\n      '&:first-of-type': {\n        borderLeftColor: 'transparent'\n      },\n      '&:last-of-type': {\n        borderRightColor: 'transparent'\n      },\n      '&.Mui-selected': {\n        borderColor: 'inherit',\n        borderLeftColor: theme.palette.primary.main !important,\n        '&:hover': {\n          bgcolor: theme.palette.primary.lighter\n        }\n      },\n      '&:hover': {\n        bgcolor: 'transparent',\n        borderColor: theme.palette.primary.main,\n        borderLeftColor: theme.palette.primary.main !important,\n        zIndex: 2\n      }\n    }\n  }}\n>\n  <ToggleButton value=\"web\" aria-label=\"web\">\n    Web\n  </ToggleButton>\n  <ToggleButton value=\"android\" aria-label=\"android\">\n    Android\n  </ToggleButton>\n  <ToggleButton value=\"ios\" aria-label=\"ios\">\n    iOS\n  </ToggleButton>\n  <ToggleButton value=\"all\" aria-label=\"all\">\n    All\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VerticalToggleButtons.tsx\n<ToggleButtonGroup orientation=\"vertical\" value={view} exclusive onChange={handleChange}>\n  <ToggleButton value=\"tree\" aria-label=\"tree\">\n    <ApartmentOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"grid\" aria-label=\"grid\">\n    <AppstoreOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"table\" aria-label=\"table\">\n    <TableOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>`;\n\nconst ToggleButtons = () => /*#__PURE__*/_jsxDEV(MainCard, {\n  title: \"Toggle Button\",\n  codeString: toggleButtonCodeString,\n  children: [/*#__PURE__*/_jsxDEV(Stack, {\n    spacing: 2,\n    sx: {\n      mb: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(ExclusiveToggleButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MultipleToggleButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorToggleButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextToggleButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VariantToggleButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(VerticalToggleButtons, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 143,\n  columnNumber: 3\n}, this);\n\n_c = ToggleButtons;\nexport default ToggleButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleButtons\");","map":{"version":3,"names":["Stack","MainCard","ExclusiveToggleButtons","MultipleToggleButtons","ColorToggleButton","TextToggleButtons","VariantToggleButtons","VerticalToggleButtons","toggleButtonCodeString","ToggleButtons","mb"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/sections/components-overview/buttons/ToggleButtons/index.tsx"],"sourcesContent":["// material-ui\nimport { Stack } from '@mui/material';\n\n// project import\nimport MainCard from 'components/MainCard';\nimport ExclusiveToggleButtons from './ExclusiveToggleButtons';\nimport MultipleToggleButtons from './MultipleToggleButtons';\nimport ColorToggleButton from './ColorToggleButton';\nimport TextToggleButtons from './TextToggleButtons';\nimport VariantToggleButtons from './VariantToggleButtons';\nimport VerticalToggleButtons from './VerticalToggleButtons';\n\n// ==============================|| TOGGLE BUTTON ||============================== //\n\nconst toggleButtonCodeString = `// ExclusiveToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\" disabled sx={{ '&.Mui-disabled': { color: 'text.disabled' } }}>\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"text formatting\">\n  <ToggleButton value=\"bold\" aria-label=\"bold\">\n    <BoldOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"italic\" aria-label=\"italic\">\n    <ItalicOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n    <UnderlineOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n    <BgColorsOutlined />\n    <DownOutlined style={{ fontSize: '0.625rem', marginLeft: 6 }} />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup color=\"primary\" value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\">\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// TextToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"one\" aria-label=\"first\">\n    One\n  </ToggleButton>\n  <ToggleButton value=\"two\" aria-label=\"second\">\n    Two\n  </ToggleButton>\n  <ToggleButton value=\"three\" aria-label=\"third\">\n    Three\n  </ToggleButton>\n  <ToggleButton value=\"four\" aria-label=\"fourth\">\n    Four\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VariantToggleButtons.tsx\n<ToggleButtonGroup\n  value={alignment}\n  color=\"primary\"\n  exclusive\n  onChange={handleAlignment}\n  aria-label=\"text alignment\"\n  sx={{\n    '& .MuiToggleButton-root': {\n      '&:not(.Mui-selected)': {\n        borderTopColor: 'transparent',\n        borderBottomColor: 'transparent'\n      },\n      '&:first-of-type': {\n        borderLeftColor: 'transparent'\n      },\n      '&:last-of-type': {\n        borderRightColor: 'transparent'\n      },\n      '&.Mui-selected': {\n        borderColor: 'inherit',\n        borderLeftColor: theme.palette.primary.main !important,\n        '&:hover': {\n          bgcolor: theme.palette.primary.lighter\n        }\n      },\n      '&:hover': {\n        bgcolor: 'transparent',\n        borderColor: theme.palette.primary.main,\n        borderLeftColor: theme.palette.primary.main !important,\n        zIndex: 2\n      }\n    }\n  }}\n>\n  <ToggleButton value=\"web\" aria-label=\"web\">\n    Web\n  </ToggleButton>\n  <ToggleButton value=\"android\" aria-label=\"android\">\n    Android\n  </ToggleButton>\n  <ToggleButton value=\"ios\" aria-label=\"ios\">\n    iOS\n  </ToggleButton>\n  <ToggleButton value=\"all\" aria-label=\"all\">\n    All\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VerticalToggleButtons.tsx\n<ToggleButtonGroup orientation=\"vertical\" value={view} exclusive onChange={handleChange}>\n  <ToggleButton value=\"tree\" aria-label=\"tree\">\n    <ApartmentOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"grid\" aria-label=\"grid\">\n    <AppstoreOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"table\" aria-label=\"table\">\n    <TableOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>`;\n\nconst ToggleButtons = () => (\n  <MainCard title=\"Toggle Button\" codeString={toggleButtonCodeString}>\n    <Stack spacing={2} sx={{ mb: 2 }}>\n      <ExclusiveToggleButtons />\n      <MultipleToggleButtons />\n      <ColorToggleButton />\n      <TextToggleButtons />\n      <VariantToggleButtons />\n    </Stack>\n    <VerticalToggleButtons />\n  </MainCard>\n);\n\nexport default ToggleButtons;\n"],"mappings":";AAAA;AACA,SAASA,KAAT,QAAsB,eAAtB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CAEA;;;AAEA,MAAMC,sBAAsB,GAAI;AAChqBA7HA;;AA+HA,MAAMC,aAAa,GAAG,mBACpB,QAAC,QAAD;EAAU,KAAK,EAAC,eAAhB;EAAgC,UAAU,EAAED,sBAA5C;EAAA,wBACE,QAAC,KAAD;IAAO,OAAO,EAAE,CAAhB;IAAmB,EAAE,EAAE;MAAEE,EAAE,EAAE;IAAN,CAAvB;IAAA,wBACE,QAAC,sBAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,qBAAD;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,iBAAD;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE,QAAC,iBAAD;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE,QAAC,oBAAD;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF,eAQE,QAAC,qBAAD;IAAA;IAAA;IAAA;EAAA,QARF;AAAA;EAAA;EAAA;EAAA;AAAA,QADF;;KAAMD,a;AAaN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}