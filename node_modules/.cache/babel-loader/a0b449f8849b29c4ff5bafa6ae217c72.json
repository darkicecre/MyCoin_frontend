{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.10.2\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2021 Adam Shaw\n*/\nimport { createElement, Fragment, config, isValidDate, addDays, createPlugin } from '@fullcalendar/common';\nvar RELEASE_DATE = '2022-04-08'; // for Scheduler\n\nvar UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too\n\nvar INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid';\nvar OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated';\nvar PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];\nvar CSS = {\n  position: 'absolute',\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px'\n};\n\nfunction buildLicenseWarning(context) {\n  var key = context.options.schedulerLicenseKey;\n  var currentUrl = typeof window !== 'undefined' ? window.location.href : '';\n\n  if (!isImmuneUrl(currentUrl)) {\n    var status_1 = processLicenseKey(key);\n\n    if (status_1 !== 'valid') {\n      return createElement(\"div\", {\n        className: \"fc-license-message\",\n        style: CSS\n      }, status_1 === 'outdated' ? createElement(Fragment, null, 'Your license key is too old to work with this version. ', createElement(\"a\", {\n        href: OUTDATED_LICENSE_URL\n      }, \"More Info\")) : createElement(Fragment, null, 'Your license key is invalid. ', createElement(\"a\", {\n        href: INVALID_LICENSE_URL\n      }, \"More Info\")));\n    }\n  }\n\n  return null;\n}\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\n\n\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid';\n  }\n\n  var parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/);\n\n  if (parts && parts[1].length === 10) {\n    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);\n    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE);\n\n    if (isValidDate(releaseDate)) {\n      // token won't be replaced in dev mode\n      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW);\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid';\n      }\n\n      return 'outdated';\n    }\n  }\n\n  return 'invalid';\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url);\n}\n\nvar OPTION_REFINERS = {\n  schedulerLicenseKey: String\n};\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning]\n});\nexport default main;","map":{"version":3,"mappings":";;;;;;AAEA,IAAMA,YAAY,GAAG,YAArB,C,CAAyC;;AACzC,IAAMC,cAAc,GAAG,MAAM,CAA7B,C,CAA8B;;AAC9B,IAAMC,mBAAmB,GAAG,yDAA5B;AACA,IAAMC,oBAAoB,GAAG,0DAA7B;AACA,IAAMC,mBAAmB,GAAG,CAC1B,+BAD0B,EAE1B,4CAF0B,CAA5B;AAIA,IAAMC,GAAG,GAAG;EACVC,QAAQ,EAAE,UADA;EAEVC,MAAM,EAAE,KAFE;EAGVC,MAAM,EAAE,KAHE;EAIVC,IAAI,EAAE,KAJI;EAKVC,UAAU,EAAE,MALF;EAMVC,WAAW,EAAE,MANH;EAOVC,WAAW,EAAE,OAPH;EAQVC,WAAW,EAAE,aARH;EASVC,OAAO,EAAE,SATC;EAUVC,QAAQ,EAAE,MAVA;EAWVC,oBAAoB,EAAE;AAXZ,CAAZ;;SAcgBC,oBAAoBC,SAAwB;EAC1D,IAAIC,GAAG,GAAGD,OAAO,CAACE,OAAR,CAAgBC,mBAA1B;EACA,IAAIC,UAAU,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAACC,QAAP,CAAgBC,IAAhD,GAAuD,EAAxE;;EAEA,IAAI,CAACC,WAAW,CAACJ,UAAD,CAAhB,EAA8B;IAC5B,IAAIK,QAAM,GAAGC,iBAAiB,CAACT,GAAD,CAA9B;;IAEA,IAAIQ,QAAM,KAAK,OAAf,EAAwB;MACtB,OACEE;QAAKC,SAAS,EAAC,oBAAf;QAAoCC,KAAK,EAAE1B;MAA3C,GACIsB,QAAM,KAAK,UAAZ,GACCE,cAACG,QAAD,EAAS,IAAT,EACG,yDADH,EAEEH;QAAGJ,IAAI,EAAEtB;MAAT,GAA6B,WAA7B,CAFF,CADD,GAMC0B,cAACG,QAAD,EAAS,IAAT,EACG,+BADH,EAEEH;QAAGJ,IAAI,EAAEvB;MAAT,GAA4B,WAA5B,CAFF,CAPJ,CADF;IAeD;EACF;;EAED,OAAO,IAAP;AACD;AAED;;;;;AAGA,SAAS0B,iBAAT,CAA2BT,GAA3B,EAA8B;EAC5B,IAAIf,mBAAmB,CAAC6B,OAApB,CAA4Bd,GAA5B,MAAqC,CAAC,CAA1C,EAA6C;IAC3C,OAAO,OAAP;EACD;;EAED,IAAMe,KAAK,GAAG,CAACf,GAAG,IAAI,EAAR,EAAYgB,KAAZ,CAAkB,mBAAlB,CAAd;;EAEA,IAAID,KAAK,IAAKA,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,KAAoB,EAAlC,EAAuC;IACrC,IAAMC,YAAY,GAAG,IAAIC,IAAJ,CAASC,QAAQ,CAACL,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,IAAlC,CAArB;IACA,IAAMM,WAAW,GAAG,IAAIF,IAAJ,CAASG,MAAM,CAACC,wBAAP,IAAmC1C,YAA5C,CAApB;;IAEA,IAAI2C,WAAW,CAACH,WAAD,CAAf,EAA8B;MAAA;MAC5B,IAAMI,eAAe,GAAGC,OAAO,CAACL,WAAD,EAAc,CAACvC,cAAf,CAA/B;;MAEA,IAAI2C,eAAe,GAAGP,YAAtB,EAAoC;QAClC,OAAO,OAAP;MACD;;MAED,OAAO,UAAP;IACD;EACF;;EAED,OAAO,SAAP;AACD;;AAED,SAASX,WAAT,CAAqBoB,GAArB,EAAwB;EACtB,OAAO,uDAAuDC,IAAvD,CAA4DD,GAA5D,CAAP;AACF;;ACnFO,IAAME,eAAe,GAAG;EAC7B3B,mBAAmB,EAAE4B;AADQ,CAAxB;ACKP,WAAeC,YAAY,CAAC;EAC1BC,cAAc,EAAEH,eADU;EAE1BI,oBAAoB,EAAE,CAACnC,mBAAD;AAFI,CAAD,CAA3B","names":["RELEASE_DATE","UPGRADE_WINDOW","INVALID_LICENSE_URL","OUTDATED_LICENSE_URL","PRESET_LICENSE_KEYS","CSS","position","zIndex","bottom","left","background","borderColor","borderStyle","borderWidth","padding","fontSize","borderTopRightRadius","buildLicenseWarning","context","key","options","schedulerLicenseKey","currentUrl","window","location","href","isImmuneUrl","status_1","processLicenseKey","createElement","className","style","Fragment","indexOf","parts","match","length","purchaseDate","Date","parseInt","releaseDate","config","mockSchedulerReleaseDate","isValidDate","minPurchaseDate","addDays","url","test","OPTION_REFINERS","String","createPlugin","optionRefiners","viewContainerAppends"],"sources":["src/license.tsx","src/options.ts","src/main.ts"],"sourcesContent":["import { config, isValidDate, addDays, createElement, CalendarContext, Fragment } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid'\nconst OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives',\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px',\n}\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n  let currentUrl = typeof window !== 'undefined' ? window.location.href : ''\n\n  if (!isImmuneUrl(currentUrl)) {\n    let status = processLicenseKey(key)\n\n    if (status !== 'valid') {\n      return (\n        <div className=\"fc-license-message\" style={CSS}>\n          {(status === 'outdated') ? (\n            <Fragment>\n              {'Your license key is too old to work with this version. '}\n              <a href={OUTDATED_LICENSE_URL}>More Info</a>\n            </Fragment>\n          ) : (\n            <Fragment>\n              {'Your license key is invalid. '}\n              <a href={INVALID_LICENSE_URL}>More Info</a>\n            </Fragment>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return null\n}\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid'\n  }\n\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid'\n      }\n\n      return 'outdated'\n    }\n  }\n\n  return 'invalid'\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n","export const OPTION_REFINERS = {\n  schedulerLicenseKey: String,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning],\n})\n"]},"metadata":{},"sourceType":"module"}