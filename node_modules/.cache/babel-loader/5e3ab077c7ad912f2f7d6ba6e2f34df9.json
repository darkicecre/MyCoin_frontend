{"ast":null,"code":"// project imports\nimport services from 'utils/mockAdapter'; // third-party\n\nimport { v4 as UIDV4 } from 'uuid';\nimport { address } from 'data/e-commerce'; // ==============================|| MOCK SERVICES ||============================== //\n\nservices.onGet('/api/address/list').reply(200, {\n  address\n});\nservices.onPost('/api/address/new').reply(request => {\n  try {\n    const data = JSON.parse(request.data);\n    const {\n      name,\n      destination,\n      building,\n      street,\n      city,\n      state,\n      country,\n      post,\n      phone,\n      isDefault\n    } = data;\n    const newAddress = {\n      id: UIDV4(),\n      name,\n      destination,\n      building,\n      street,\n      city,\n      state,\n      country,\n      post,\n      phone,\n      isDefault\n    };\n    let result = address;\n\n    if (isDefault) {\n      result = address.map(item => {\n        if (item.isDefault === true) {\n          return { ...item,\n            isDefault: false\n          };\n        }\n\n        return item;\n      });\n    }\n\n    result = [...address, newAddress];\n    return [200, {\n      address: result\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nservices.onPost('/api/address/edit').reply(request => {\n  try {\n    const data = JSON.parse(request.data);\n    let result = address;\n\n    if (data.isDefault) {\n      result = address.map(item => {\n        if (item.isDefault === true) {\n          return { ...item,\n            isDefault: false\n          };\n        }\n\n        return item;\n      });\n    }\n\n    result = address.map(item => {\n      if (item.id === data.id) {\n        return data;\n      }\n\n      return item;\n    });\n    return [200, {\n      result\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"names":["services","v4","UIDV4","address","onGet","reply","onPost","request","data","JSON","parse","name","destination","building","street","city","state","country","post","phone","isDefault","newAddress","id","result","map","item","err","console","error","message"],"sources":["/home/hieu/Desktop/MyCoin_front/MyCoin_frontend/src/_api/billing-address.ts"],"sourcesContent":["// project imports\nimport services from 'utils/mockAdapter';\n\n// third-party\nimport { v4 as UIDV4 } from 'uuid';\n\nimport { address } from 'data/e-commerce';\n\n// ==============================|| MOCK SERVICES ||============================== //\n\nservices.onGet('/api/address/list').reply(200, { address });\n\nservices.onPost('/api/address/new').reply((request) => {\n  try {\n    const data = JSON.parse(request.data);\n    const { name, destination, building, street, city, state, country, post, phone, isDefault } = data;\n    const newAddress = {\n      id: UIDV4(),\n      name,\n      destination,\n      building,\n      street,\n      city,\n      state,\n      country,\n      post,\n      phone,\n      isDefault\n    };\n\n    let result = address;\n    if (isDefault) {\n      result = address.map((item) => {\n        if (item.isDefault === true) {\n          return { ...item, isDefault: false };\n        }\n        return item;\n      });\n    }\n\n    result = [...address, newAddress];\n\n    return [200, { address: result }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nservices.onPost('/api/address/edit').reply((request) => {\n  try {\n    const data = JSON.parse(request.data);\n\n    let result = address;\n    if (data.isDefault) {\n      result = address.map((item) => {\n        if (item.isDefault === true) {\n          return { ...item, isDefault: false };\n        }\n        return item;\n      });\n    }\n\n    result = address.map((item) => {\n      if (item.id === data.id) {\n        return data;\n      }\n      return item;\n    });\n\n    return [200, { result }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,mBAArB,C,CAEA;;AACA,SAASC,EAAE,IAAIC,KAAf,QAA4B,MAA5B;AAEA,SAASC,OAAT,QAAwB,iBAAxB,C,CAEA;;AAEAH,QAAQ,CAACI,KAAT,CAAe,mBAAf,EAAoCC,KAApC,CAA0C,GAA1C,EAA+C;EAAEF;AAAF,CAA/C;AAEAH,QAAQ,CAACM,MAAT,CAAgB,kBAAhB,EAAoCD,KAApC,CAA2CE,OAAD,IAAa;EACrD,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAAb;IACA,MAAM;MAAEG,IAAF;MAAQC,WAAR;MAAqBC,QAArB;MAA+BC,MAA/B;MAAuCC,IAAvC;MAA6CC,KAA7C;MAAoDC,OAApD;MAA6DC,IAA7D;MAAmEC,KAAnE;MAA0EC;IAA1E,IAAwFZ,IAA9F;IACA,MAAMa,UAAU,GAAG;MACjBC,EAAE,EAAEpB,KAAK,EADQ;MAEjBS,IAFiB;MAGjBC,WAHiB;MAIjBC,QAJiB;MAKjBC,MALiB;MAMjBC,IANiB;MAOjBC,KAPiB;MAQjBC,OARiB;MASjBC,IATiB;MAUjBC,KAViB;MAWjBC;IAXiB,CAAnB;IAcA,IAAIG,MAAM,GAAGpB,OAAb;;IACA,IAAIiB,SAAJ,EAAe;MACbG,MAAM,GAAGpB,OAAO,CAACqB,GAAR,CAAaC,IAAD,IAAU;QAC7B,IAAIA,IAAI,CAACL,SAAL,KAAmB,IAAvB,EAA6B;UAC3B,OAAO,EAAE,GAAGK,IAAL;YAAWL,SAAS,EAAE;UAAtB,CAAP;QACD;;QACD,OAAOK,IAAP;MACD,CALQ,CAAT;IAMD;;IAEDF,MAAM,GAAG,CAAC,GAAGpB,OAAJ,EAAakB,UAAb,CAAT;IAEA,OAAO,CAAC,GAAD,EAAM;MAAElB,OAAO,EAAEoB;IAAX,CAAN,CAAP;EACD,CA9BD,CA8BE,OAAOG,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAd;IACA,OAAO,CAAC,GAAD,EAAM;MAAEG,OAAO,EAAE;IAAX,CAAN,CAAP;EACD;AACF,CAnCD;AAqCA7B,QAAQ,CAACM,MAAT,CAAgB,mBAAhB,EAAqCD,KAArC,CAA4CE,OAAD,IAAa;EACtD,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAAb;IAEA,IAAIe,MAAM,GAAGpB,OAAb;;IACA,IAAIK,IAAI,CAACY,SAAT,EAAoB;MAClBG,MAAM,GAAGpB,OAAO,CAACqB,GAAR,CAAaC,IAAD,IAAU;QAC7B,IAAIA,IAAI,CAACL,SAAL,KAAmB,IAAvB,EAA6B;UAC3B,OAAO,EAAE,GAAGK,IAAL;YAAWL,SAAS,EAAE;UAAtB,CAAP;QACD;;QACD,OAAOK,IAAP;MACD,CALQ,CAAT;IAMD;;IAEDF,MAAM,GAAGpB,OAAO,CAACqB,GAAR,CAAaC,IAAD,IAAU;MAC7B,IAAIA,IAAI,CAACH,EAAL,KAAYd,IAAI,CAACc,EAArB,EAAyB;QACvB,OAAOd,IAAP;MACD;;MACD,OAAOiB,IAAP;IACD,CALQ,CAAT;IAOA,OAAO,CAAC,GAAD,EAAM;MAAEF;IAAF,CAAN,CAAP;EACD,CArBD,CAqBE,OAAOG,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAd;IACA,OAAO,CAAC,GAAD,EAAM;MAAEG,OAAO,EAAE;IAAX,CAAN,CAAP;EACD;AACF,CA1BD"},"metadata":{},"sourceType":"module"}